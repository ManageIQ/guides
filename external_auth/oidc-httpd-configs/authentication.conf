LoadModule auth_openidc_module modules/mod_auth_openidc.so
ServerName http://${HTTPD_AUTH_HOST}
LogLevel   debug

OIDCProviderMetadataURL            https://${HTTPD_AUTH_HOST}:8443/auth/realms/ManageIQ/.well-known/openid-configuration
OIDCClientID                       ${HTTPD_AUTH_OIDC_CLIENT_ID}
OIDCClientSecret                   ${HTTPD_AUTH_OIDC_CLIENT_SECRET}
OIDCRedirectURI                    http://${HTTPD_AUTH_HOST}/oidc_login/redirect_uri
OIDCCryptoPassphrase               sp-secret
OIDCOAuthRemoteUserClaim           username
OIDCCacheShmEntrySizeMax           65536

OIDCOAuthClientID                  ${HTTPD_AUTH_OIDC_CLIENT_ID}
OIDCOAuthClientSecret              ${HTTPD_AUTH_OIDC_CLIENT_SECRET}
OIDCOAuthIntrospectionEndpoint     https://${HTTPD_AUTH_HOST}:8443/auth/realms/ManageIQ/protocol/openid-connect/token/introspect
OIDCOAuthIntrospectionEndpointAuth client_secret_post
OIDCCookieSameSite                 On

# different from production (hacks for self signed keys ssl)
OIDCSSLValidateServer              Off
OIDCOAuthSSLValidateServer         Off
# /different

<Location /oidc_login>
  AuthType                   openid-connect
  Require                    valid-user
  FileETag                   None
  Header Set Cache-Control   "max-age=0, no-store, no-cache, must-revalidate"
  Header Set Pragma          "no-cache"
  Header Unset ETag
</Location>

<Location /ui/service/oidc_login>
  AuthType                   openid-connect
  Require                    valid-user
  FileETag                   None
  Header Set Cache-Control   "max-age=0, no-store, no-cache, must-revalidate"
  Header Set Pragma          "no-cache"
  Header Set Set-Cookie      "miq_oidc_access_token=%{OIDC_access_token}e; Max-Age=10; Path=/ui/service"
  Header Unset ETag
</Location>

# httpdAuthApplicationAPIConf
<LocationMatch ^/api(?!\/(v[\d\.]+\/)?product_info$)>
  SetEnvIf X-Auth-Token  '^.+$'             let_api_token_in
  SetEnvIf X-MIQ-Token   '^.+$'             let_sys_token_in
  SetEnvIf X-CSRF-Token  '^.+$'             let_csrf_token_in

  AuthType       oauth20
  AuthName       "External Authentication (oidc) for API"
  Require        valid-user
  Order          Allow,Deny
  Allow from env=let_api_token_in
  Allow from env=let_sys_token_in
  Allow from env=let_csrf_token_in
  Satisfy Any

  SetEnvIf Authorization '^Basic +YWRtaW46' let_admin_in
  Allow from env=let_admin_in
</LocationMatch>

RequestHeader unset X-REMOTE-USER
RequestHeader unset X-REMOTE_USER
RequestHeader unset X_REMOTE-USER
RequestHeader unset X_REMOTE_USER

RequestHeader set X_REMOTE_USER           %{OIDC_CLAIM_PREFERRED_USERNAME}e env=OIDC_CLAIM_PREFERRED_USERNAME
RequestHeader set X_EXTERNAL_AUTH_ERROR   %{EXTERNAL_AUTH_ERROR}e           env=EXTERNAL_AUTH_ERROR
RequestHeader set X_REMOTE_USER_EMAIL     %{OIDC_CLAIM_EMAIL}e              env=OIDC_CLAIM_EMAIL
RequestHeader set X_REMOTE_USER_FIRSTNAME %{OIDC_CLAIM_GIVEN_NAME}e         env=OIDC_CLAIM_GIVEN_NAME
RequestHeader set X_REMOTE_USER_LASTNAME  %{OIDC_CLAIM_FAMILY_NAME}e        env=OIDC_CLAIM_FAMILY_NAME
RequestHeader set X_REMOTE_USER_FULLNAME  %{OIDC_CLAIM_NAME}e               env=OIDC_CLAIM_NAME
RequestHeader set X_REMOTE_USER_GROUPS    %{OIDC_CLAIM_GROUPS}e             env=OIDC_CLAIM_GROUPS
RequestHeader set X_REMOTE_USER_DOMAIN    %{OIDC_CLAIM_DOMAIN}e             env=OIDC_CLAIM_DOMAIN
